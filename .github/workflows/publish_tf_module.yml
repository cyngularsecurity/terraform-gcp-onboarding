name: Auto Tag and Release

on:
  push:
    branches:
      - main
      - release/*
jobs:
  tag-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PA_TOKEN }}

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          # Fetch all tags from the remote
          git fetch --tags
          # Get the latest tag, defaulting to v0.0.0 if no tags exist
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          echo "Latest tag found: $latest_tag"

      - name: Calculate new version
        id: calculate_version
        run: |
          # Default to v0.0.0 if no tag exists
          if [ -z "$latest_tag" ]; then
            latest_tag="v0.0.0"
          fi

          # Parse version numbers
          IFS='.' read -r -a parts <<< "${latest_tag#v}"
          major="${parts[0]:-0}"
          minor="${parts[1]:-0}"
          patch="${parts[2]:-0}"

          # Increment patch version
          patch=$((patch + 1))
          new_version="v$major.$minor.$patch"

          # Check if the new version already exists
          if git rev-parse "$new_version" >/dev/null 2>&1; then
            echo "Tag $new_version already exists. Skipping tag creation."
            echo "tag_exists=true" >> $GITHUB_ENV
          else
            echo "tag_exists=false" >> $GITHUB_ENV
          fi

          echo "new_version=$new_version" >> $GITHUB_ENV
          echo "New version is $new_version"

      - name: Create new tag
        if: env.tag_exists == 'false'
        run: |
          git tag ${{ env.new_version }}
          git push origin ${{ env.new_version }}

      - name: Create GitHub release
        if: env.tag_exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_version }}
          release_name: ${{ env.new_version }}
          draft: false
          prerelease: false